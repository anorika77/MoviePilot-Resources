# .github/workflows/compile-windows-x64.yml
name: 编译 Windows x64 资源 (标签触发)

on:
  push:
    tags:
      - 'v*'  # 仅当推送 v 开头的标签时触发（如 v1.0.0、v2.3.9）

jobs:
  compile-windows-x64:
    name: 编译 Windows x64 - Python ${{ matrix.python-version }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        include:
          - platform: Windows
            arch: amd64
            artifact-name: sites.cp${{ matrix.python-version | replace('.', '') }}-win_amd64.pyd

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python ${{ matrix.python-version }} (x64)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: 安装 Windows 编译依赖
        run: |
          choco install -y mingw
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel cython

      - name: 编译扩展模块
        run: |
          # 替换为实际编译命令（如使用 setup.py 构建）
          mkdir -p build/app/helper
          # 示例：python setup.py build_ext --inplace
          echo "编译产物: ${{ matrix.artifact-name }}" > build/app/helper/${{ matrix.artifact-name }}

      - name: 验证编译产物
        run: |
          ls build/app/helper/

      - name: 打包编译结果
        run: |
          mkdir -p artifacts/app/helper
          cp build/app/helper/${{ matrix.artifact-name }} artifacts/app/helper/
          cp LICENSE artifacts/
          cp package.json artifacts/
          if (Test-Path "package.v2.json") { cp package.v2.json artifacts/ }

      - name: 上传 Windows x64 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x64-py${{ matrix.python-version }}-${{ github.ref_name }}  # 产物名称包含标签版本
          path: artifacts/
